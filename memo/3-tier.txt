3-tier
	스프링 프로젝트는 3-tier 방식으로 설계된다.

▶ Presentation Tier - 화면 계층 Controller
	화면에 보여주는 기술을 사용하는 영역

▶ Buisiness Tier - 비지니스 계층, 로직 계층 Service
	순수한 비지니스 로직을 담고 있는 영역

▶ Persistence Tier - 영속 계층, 데이터 계층 Mapper
	데이터를 어떤 방식으로 보관하고 사용하는가에 대한 설계가 들어가는 영역

3-tier의 목적
	각 영역은 독립적으로 설계되어
	나중에 특정 기술이 변하더라도 필요한 부분을 전자제춤의 부품처럼 쉽게
	교환할 수 있게 하자는 방식이다.

3-tier의 구조
	Presentation ↔ Business ↔ Persistence ↔DBMS
	           ↑  	                ↑         ↑	                   ↑
	Controller	           Service      Repository       Mapper   


모든 예외처리는 사용자 예외처리로 만들어서 처리해야함

Optional 
-> NPE를 피하기 위해 감싸고 람다로 구현

Service는 트랜잭션 관리를 위한 것

mapper, DAO, Service, Controller
====================================================================
front clone 받고 .git 삭제
.gitignore에 vscode 지우지 말고 intellij만 추가
sql 경로도 추가
"init"으로 커밋 후 기존방식대로 진행

organization의 repository이름은 프로젝트 이름으로 만든다.

모두 다 함께 만들지만,
팀장 컴퓨터로 진행

domain > VO
mapper > Mapper
repository> DAO
Service > Service, Servicelmple
controller > Controller
xml파일은 timeMapper 말고는 건들지 말 것

config 파일은 수정해야할 때 무조건 슬랙에 보고 후 사용하는 인원 없을 시에만 수정
===================================================================
CREATE TABLE TBL_USER(
   ID NUMBER CONSTRAINT PK_USER PRIMARY KEY,
   USER_ID VARCHAR2(255) NOT NULL,
   USER_EMAIL VARCHAR2(255) NOT NULL,
   USER_PASSWORD NUMBER NOT NULL,
   USER_TYPE NUMBER NOT NULL,
   USER_NAME VARCHAR2(255) NOT NULL,
   USER_GENDER VARCHAR2(255),
   USER_BIRTHDAY NUMBER,
   USER_AREA VARCHAR2(255),
   USER_DETAILED_AREA VARCHAR2(255),
   USER_ADDRESS VARCHAR2(255),
   USER_INTRODUCE VARCHAR2(255),
   USER_HOMEPAGE_ADDRESS VARCHAR2(255),
   USER_CELL_PHONE_NUMBER NUMBER,
   USER_PHONE_NUMBER NUMBER NOT NULL,
   USER_FAX_NUMBER NUMBER, 
   USER_MAJOR VARCHAR2(255),      -- USER_TYPE이 일반일 경우 학과 정보가 없기 때문에 NOT NULL 제외
   CREATED_DATE DATE DEFAULT SYSDATE,
   UPDATED_DATE DATE DEFAULT SYSDATE
);

CREATE TABLE TBL_PROFILE (
   ID NUMBER CONSTRAINT PK_TBL_PROFILE PRIMARY KEY,
   USER_ID NUMBER NOT NULL,
   FILE_NAME VARCHAR2(255) NOT NULL,
   FILE_PATH VARCHAR(255), -- 첨부파일 경로
   FILE_TYPE VARCHAR2(50),
   FILE_SIZE NUMBER,
   CREATED_DATE DATE DEFAULT SYSDATE,
   CONSTRAINT FK_PROFILE_USER FOREIGN KEY(USER_ID)
   REFERENCES TBL_USER(ID)
);
   
CREATE TABLE TBL_USER_POSSESSED_TECHNOLOGY(
   ID NUMBER CONSTRAINT USER_POSSESSED_TECHNOLOGY PRIMARY KEY,
   TECHNOLOGY_NAME VARCHAR2(255),
   PROFICIENCY VARCHAR2(255),
   EXPERIENCE VARCHAR2(255),
   USER_ID NUMBER NOT NULL,
   CREATED_DATE DATE DEFAULT SYSDATE,
   UPDATED_DATE DATE DEFAULT SYSDATE,
   CONSTRAINT FK_USER_P_TECHNOLOGY_USER FOREIGN KEY(USER_ID)
   REFERENCES TBL_USER(ID)
);

CREATE TABLE TBL_POST(
   ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
   POST_TITLE VARCHAR2(255) NOT NULL,
   POST_CONTENT VARCHAR2(255) NOT NULL,
   POST_TYPE NUMBER NOT NULL,
   USER_ID NUMBER NOT NULL,
   POST_VIEW NUMBER DEFAULT 0,
   CREATED_DATE DATE DEFAULT SYSDATE,
   UPDATED_DATE DATE DEFAULT SYSDATE,
   CONSTRAINT FK_POST_USER FOREIGN KEY(USER_ID)
   REFERENCES TBL_USER(ID)
);

CREATE TABLE TBL_ATTACHMENT (
   ID NUMBER CONSTRAINT PK_TBL_ATTACHMENT PRIMARY KEY,
   POST_ID NUMBER NOT NULL,
   FILE_NAME VARCHAR2(255) NOT NULL,
   FILE_PATH VARCHAR(255), -- 첨부파일 경로
   FILE_TYPE VARCHAR2(50),
   FILE_SIZE NUMBER,
   CREATED_DATE DATE DEFAULT SYSDATE,
   CONSTRAINT FK_ATTACHMENT_POST FOREIGN KEY(POST_ID)
   REFERENCES TBL_POST(ID)
);
   
CREATE TABLE TBL_INFO_POST(
   ID NUMBER CONSTRAINT PK_INFO_POST PRIMARY KEY,
   CONSTRAINT FK_INFO_POST_POST FOREIGN KEY(ID)
   REFERENCES TBL_POST(ID)
);

CREATE TABLE TBL_FREE_POST(
   ID NUMBER CONSTRAINT PK_FREE_POST PRIMARY KEY,
   CONSTRAINT FK_FREE_POST_POST FOREIGN KEY(ID)
   REFERENCES TBL_POST(ID)
);

CREATE TABLE TBL_THESIS_POST(
   ID NUMBER CONSTRAINT PK_THESIS_POST PRIMARY KEY,
   RESEARCH_FIELD VARCHAR2(255),
   RESEARCH_REQUIREMENT VARCHAR2(255),
   CONSTRAINT FK_THESIS_POST_POST FOREIGN KEY(ID)
   REFERENCES TBL_POST(ID)
);

CREATE TABLE TBL_MARKET_POST(
   ID NUMBER CONSTRAINT PK_MARKET_POST PRIMARY KEY,
   LOCATION VARCHAR2(255),
   DETAIL_LOCATION VARCHAR2(255),
   CONSTRAINT FK_MARKET_POST_POST FOREIGN KEY(ID)
   REFERENCES TBL_POST(ID)
);

CREATE TABLE TBL_PROJECT_POST(
   ID NUMBER CONSTRAINT PK_PROJECT_POST PRIMARY KEY,
   PROJECT_FIELD VARCHAR2(255),
   PROJECT_REQUIREMENT VARCHAR2(255),
   CONSTRAINT FK_PROJECT_POST_POST FOREIGN KEY(ID)
   REFERENCES TBL_POST(ID)
);
	
CREATE TABLE TBL_QA_POST(
   ID NUMBER CONSTRAINT PK_QA_POST PRIMARY KEY,
   CONSTRAINT FK_QA_POST_POST FOREIGN KEY(ID)
   REFERENCES TBL_POST(ID)
);

CREATE TABLE TBL_REPLY(
    ID NUMBER CONSTRAINT PK_REPLY PRIMARY KEY,
    POST_ID NUMBER NOT NULL,                   
    USER_ID NUMBER NOT NULL,                      
    REPLY_CONTENT VARCHAR2(255) NOT NULL,
    CREATED_DATE DATE DEFAULT SYSDATE,            
    UPDATED_DATE DATE DEFAULT SYSDATE,     
    CONSTRAINT FK_REPLY_POST FOREIGN KEY(POST_ID) 
    REFERENCES TBL_POST(ID),  
    CONSTRAINT FK_REPLY_USER FOREIGN KEY(USER_ID) 
    REFERENCES TBL_USER(ID) 
);

CREATE TABLE TBL_REPORT(
    ID NUMBER CONSTRAINT PK_TBL_REPORT PRIMARY KEY,   
    POST_ID NUMBER NOT NULL,                         
    USER_ID NUMBER NOT NULL,                        
    REPORT_REASON VARCHAR2(255) NOT NULL,     
    REPORT_STATUS NUMBER NOT NULL,
    POST_VIEW NUMBER DEFAULT 0,
    CREATED_DATE DATE DEFAULT SYSDATE,
    UPDATED_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT FK_REPORT_POST FOREIGN KEY(POST_ID) 
    REFERENCES TBL_POST(ID), 
    CONSTRAINT FK_REPORT_USER FOREIGN KEY(USER_ID) 
    REFERENCES TBL_USER(ID)
);

CREATE TABLE TBL_NOTICE(
   ID NUMBER CONSTRAINT PK_TBL_NOTICE PRIMARY KEY,
   NOTICE_TITLE VARCHAR2(255) NOT NULL,
   NOTICE_CONTENT VARCHAR2(255) NOT NULL,
   CREATED_DATE DATE DEFAULT SYSDATE,            
   UPDATED_DATE DATE DEFAULT SYSDATE
);	