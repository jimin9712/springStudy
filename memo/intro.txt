Framework
	라이브러리란, 개발자가 작성해 놓은 코드 파일을 의미하며,
	API란, 여러 라이브러리가 모여있는 패키지(JAR)를 의미한다.
	프레임워크란, API가 굉장히 많이 모여져서 덩치가 커져있는 것을 의미한다.

Framework의 장점
	개발에 필요한 구조를 이미 코드로 만들어 놓았기 때문에 , 실력이 부족한 개발자라 하더라도
	반쯤 완성된 상태에서 필요한 부분을 조립하는 형태의 개발이 가능하다.
	회사 입장에서는 프레임워크를 사용하면 일정한 품질이 보장되는 결과물을 얻을 수 있고,
	개발자 입장에서는 완성된 구조에 자신이 맡은 서비스에 대한 코드를 개발해서 넣기 때문에
	개발 시간을 단축할 수 있다.	

Spring Framework
	경량 프레임워크.
	예전 프레임워크는 다양한 경우를 처리하기 위해 여러 기능을 넣다 보니
	하나의 기능을 위해서 아주 많은 구조가 필요했다.	기술이 너무나 복잡하고
	방대했기 때문에, 전체를 이해하고 개발하기에는 어려움이 많았다.
	그래서 Spring Framework가 등장했고, 특정 기능을 위주로 간단한 JAR파일 등을 
	선택하여 모든 개발이 가능하도록 구성되어 있다
	
Spring Framework 장점
	- 프로젝트 전체 구조를 설계할 때 유용하다(빠른 속도로 서버 제작 가능)
※	- 다른 프레임워크들의 포용, 여러 프레임워크를 혼용해서 사용할 수 있기 때문에 접착성이 좋다.
	- 개발 생산성과 개발도구의 지원

Spring Framework의 특징
	- POJO 기반의 구성
	- DI를 통한 객체간의 관계 구성
	- AOP 지원 
	-Transaction 관리
	- 편리한 MVC 관리
	- WAS에 종속적이지 않은 개발 환경

▶ POJO 기반의 구성 (JAVA 쓸 수 있다는 뜻)
	Plain Old Java Object.
	오래된 방식의 간단한 자바 객체라는 의미이며, JAVA 코드에서 일반적으로 객체를 구성하는 방식을
	Spring Framework에서 그대로 사용할 수 있다는 의미이다.


	
▶ DI를 통한 객체간의 관계 구성
	Dependency Injection 의존성 주입


▶ AOP 지원
	

▶ Transaction 관리 
	DB 작업 시 , 트랜잭션을 매번 상황에 맞게 관리하지 않고
	어노테이션을 사용하여 트랜잭션 영역을 구성한 뒤
	특정 예외 발생 시 자동으로 롤백을 처리하거나 커밋을 처리한다.


▶ WAS에 종속적이지 않은 개발 환경
	전체 Application을 실행하지 않아도 기능별 단위 테스트가 용이하기 때문에
	버그를 줄이고 개발 시간을 단축할 수 있다.


Spring Boot
	Spring Framework를 사용함에 있어서 초기 설정 및 필요한 라이브러리에 대한 설정의 어려움이 많으며,
	시간이 너무 오래 걸린다. 따라서 자동 설정과 개발에 필요한 모든 것을 관리해주는 Spring Boot를 선호한다.
	각 코어 및 라이브러리의 버전들고 맞추어야 하지만 Spring Boot를 사용하면 이러한 복잡성을 해결하기에도 좋다.
======================================================================================
실습1
요리(Food)
칼(Knife)

두 객체간의 관계를 구성하고
DI를 통해 단위 테스트를 진행한다.
======================================================================================
실습2

상속관계를 판단하여 하나의 객체를 인터페이스로 선언한다.

각 레스토랑에 셀바 이용 가능 여부와

스테이크 가격을 필드로 구성한다.

스테이크의 가격은 항상 똑같지만

각 레스토랑에서 변경 가능하다.

기본 레스토랑은 아웃백으로 설정한다
=======================================================================================
Spring MVC(Front-Controller Pattern)

Controller(화면) 에서는 DTO 사용 , OCP 때문에
DataBase 에서는 VO , 나중에 엔티티로 바뀜

DB 연동할 때는 mybatis랑 sql도 추가해서 create

application.yml 파일에서 원래 config에서 했던 설정
mybatis  설정 추가

interface로 하나 만들고 Mapper라고 Spring에 보고해줘야함
interface에서 설정한 후
 
config .xml
timeMapper.xml 파일 만들고
-> 여기서 사용할 수 있음
select id="getTime" resultType="string" 이런 식으로


회원테이블에 대한 INSERT 서비스를 제작한 뒤
단위 테스트를 진행한다

Mapper 인터페이스는  JUnit으로 진행하고
Controller 테스트는 브라우저에서 진행한다.
화면없이 콘솔로만 확인한다.

9시 40-9시 50분 영상 확인

이메일, 비밀번호 칼럼을 추가하고
VO 및 DTO를 수정한다
Mapper  단위 테스트 진행
Controller 브라우저 테스트 진행

3시 20분 까지


게시글 CRUD 구현
게시글 테이블을 제작한다.
ID, POST_TITLE, POST_CONTENT, POST_READ_CONTENT, STATUS, CREATED_DATE, UPDATED_DATE

VO, DTO

게시글 작성

게시글 목록
-JOIN
게시글 조회
-JOIN
게시글 수정
게시글 삭제
조회수 증가
게시글 목록(최신순)
-join

단위 테스트 모두 진행(컨트롤러 제작까지)

보통 DB에서

숙제1================================
대댓글 CRUD 구현

대댓글 테이블을 제작한다.
REPLY_CONTENT, GROUP_ID, REPLY_DEPTH

댓글은 GROUP_ID가 NULL이다. 

VO, DTO 구현

댓글 작성
대댓글 작성
댓글 목록
대댓글 목록
댓글 삭제

-> 원본이 삭제 되면 "삭제된 댓글입니다." 로
UPDATE 후 대댓글은 유지가 보통이지만 일단 그냥 해라

ON DELETE CASCADE 이거 함 써봐라
부모를 날리면 참조 다 날아감(연결된 거 그냥 다 날아가는 옵션)

댓글 수정 - 그냥 업데이트

모든 댓글에는 작성자 정보가 포함된다.
==========================================

숙제2======================================
비슷한 내용으로 더 해보자
알림
1. 댓글에 대댓글이 달렸을 때  댓글의 멤버 ID에 알림이 울리게 해보자

알림 테이블을 제작한다.


